questionName,correctAnswer,incorrectAnswerA,incorrectAnswerB,incorrectAnswerC,difficulty,topicCode,feedback
What is a key characteristic of a high-level language?,It is designed to be easy for humans to read and write.,It consists of binary 1s and 0s.,It is specific to the hardware of one machine.,It does not require a translator.,Easy,2.5,High-level languages use English-like words and are easier for programmers. Low-level languages are closer to machine code and are hardware-specific.
What is a key characteristic of a low-level language?,It is closely related to the hardware and machine code.,It uses English-like keywords such as PRINT and IF.,It can run on any computer without change.,It is the easiest type of language for humans to understand.,Easy,2.5,Low-level languages like assembly language are closely tied to the CPUs instruction set. High-level languages are more abstract and portable.
What is the purpose of a translator in programming?,To convert source code into machine code.,To help programmers debug logic errors.,To translate the program into different human languages.,To make the program run faster.,Easy,2.5,Computers only understand machine code. A translator converts the code written by a programmer (source code) into machine code that the computer can execute.
What is the main difference between a compiler and an interpreter?,A compiler translates the entire code at once; an interpreter translates line by line.,An interpreter translates the entire code at once; a compiler translates line by line.,A compiler is used for high-level languages; an interpreter is for low-level languages.,An interpreter produces an executable file; a compiler does not.,Easy,2.5,A compiler converts all the source code into machine code in one go creating a standalone executable file. An interpreter translates and executes the program one line at a time.
What is a common benefit of using a compiler?,The compiled executable file can run independently on the target machine.,Programs run slower because they are translated line by line.,It is easier to debug errors using a compiler.,The source code is included with the executable for easy editing.,Easy,2.5,Once compiled the executable file does not need the compiler or the source code to run. This also protects the source code and often results in faster execution.
What is a common benefit of using an interpreter?,It is easier to debug as errors are reported immediately line-by-line.,It produces a fast-running executable file.,It is better for completing the final version of a program.,It hides the source code from the user.,Easy,2.5,Interpreters are useful during development because they stop and report errors as they are encountered making the debugging process simpler.
What is a common drawback of using a compiler?,The entire program must be recompiled after every change.,Errors are only reported after the entire program is translated.,The source code must be shared with users.,The program runs more slowly.,Easy,2.5,A compiler must translate the entire program again after any change is made to the source code. This can slow down development.
What is a common drawback of using an interpreter?,The program may run slower because it is translated during execution.,It produces an executable file that can be distributed.,It is difficult to find errors in the code.,It cannot be used for high-level languages.,Easy,2.5,Because the translation happens while the program is running interpreted programs often run slower than compiled programs.
Which of these is a high-level language?,Python,Machine code,Assembly language,Binary,Easy,2.5,Python uses English-like keywords and is a high-level language. Machine code binary and assembly language are all forms of low-level languages.
Which of these is a low-level language?,Assembly language,Python,Java,C++,Easy,2.5,Assembly language is a low-level language that uses mnemonics closely related to machine code. Python Java and C++ are high-level languages.
What is machine code?,The lowest-level language consisting of binary instructions.,A language that uses English words like ADD and LOAD.,A language that is portable across different CPUs.,A language that does not require a translator.,Easy,2.5,Machine code is the binary language that a CPU executes directly. It is specific to the architecture of the CPU.
Why are translators needed for high-level languages?,Because computers only understand machine code.,Because high-level languages are too slow.,To make the code easier for humans to read.,To add comments to the code automatically.,Easy,2.5,High-level languages are designed for humans. A translator is essential to convert this human-readable code into machine-readable code that the computer can execute.
What is the main advantage of a high-level language over a low-level language?,It is portable and can run on different hardware with a translator.,It executes faster than low-level languages.,It does not require a translator.,It provides more control over the hardware.,Easy,2.5,High-level languages are largely hardware-independent. The same source code can run on different types of computers using the appropriate translator for that system.
What is the main advantage of a low-level language over a high-level language?,It allows for more precise control over hardware and can be more efficient.,It is easier to learn and use.,It is portable across different platforms.,It has better facilities for debugging.,Easy,2.5,Low-level languages allow programmers to write highly optimized code that takes full advantage of a specific processors features leading to very fast and efficient programs.
What is an Integrated Development Environment IDE?,A software application that provides comprehensive facilities for programming.,A type of low-level language.,A tool that only translates code.,A database for storing source code.,Easy,2.5,An IDE combines tools like a code editor debugger and translator into a single application to make programming easier.
Which of these is a common feature of an IDE?,A code editor with syntax highlighting.,A graphics design tool.,A social media interface.,A virus scanner.,Easy,2.5,IDEs include code editors that color-code keywords variables and comments to make the code easier to read and errors easier to spot.
What are error diagnostics in an IDE?,Tools that help identify and debug errors in the code.,Tools that translate code into different human languages.,Tools that make the program run faster.,Tools that design the user interface.,Easy,2.5,Error diagnostics include features like syntax checkers debuggers and error messages that help programmers find and fix mistakes in their code.
What is a run-time environment in an IDE?,A tool that allows the programmer to execute the program within the IDE.,A tool for editing source code.,A tool for version control.,A tool for designing flowcharts.,Easy,2.5,A run-time environment lets programmers run their code without leaving the IDE. This is useful for testing and debugging.
What is the purpose of auto-completion in an IDE editor?,To speed up coding by suggesting and completing code statements.,To automatically correct all logic errors.,To translate the code into machine language.,To run the program.,Easy,2.5,Auto-completion predicts what the programmer is typing and suggests possible completions reducing typing time and preventing syntax errors.
What is the purpose of a debugger in an IDE?,To allow the programmer to step through code and inspect variable values.,To compile the code into an executable.,To edit the source code.,To document the code.,Easy,2.5,A debugger is a powerful tool that allows programmers to execute code line-by-line watch how variable values change and identify the exact location of logic errors.
What is the purpose of breakpoints in a debugger?,To pause the execution of the program at a specific line.,To permanently stop the program from running.,To fix errors in the code automatically.,To speed up the program execution.,Easy,2.5,Breakpoints are markers a programmer sets on lines of code. When the program runs it will pause at these points allowing the programmer to examine the program state.
What is the primary benefit of using an IDE for development?,It combines all necessary tools into one place improving productivity.,It guarantees the code will have no errors.,It automatically writes the code for the programmer.,It makes the final program run faster.,Easy,2.5,The main advantage of an IDE is the integration of tools like editor translator debugger and documentation in one application streamlining the development process.
Which tool would you use to find a logic error?,Debugger,Compiler,Text editor,Auto-completion,Medium,2.5,A debugger allows you to step through code and watch variable values to find where the program logic is going wrong. A compiler finds syntax errors. A text editor is for writing code and auto-completion helps write it.
Which statement about interpreters is correct?,They translate and execute code one line at a time.,They produce a standalone executable file.,They translate the entire program before any execution.,They are never used during development.,Medium,2.5,Interpreters process the source code line-by-line translating and executing each line immediately. This is different from a compiler which translates everything first.
What is a key drawback of machine code?,It is difficult for humans to read and write.,It is portable across different computer architectures.,It is easy to debug.,It does not require any translation.,Medium,2.5,Machine code consisting of long sequences of binary numbers is extremely error-prone and time-consuming for humans to work with directly.
Why might a programmer choose to use a low-level language?,To write code that must be very fast and efficient eg in a device driver.,To develop a program quickly and easily.,To ensure the program can run on any computer.,To make the code easy to read for other programmers.,Medium,2.5,Low-level languages are chosen when performance and hardware control are critical such as in operating systems or embedded systems programming.
What does the term portability mean in programming?,The ability of code to run on different types of computer systems.,How easy the code is to carry on a USB stick.,The speed at which the code executes.,The number of errors in the code.,Medium,2.5,Portability is a key advantage of high-level languages. The same source code can be run on different platforms (eg Windows Mac) if a suitable translator exists for that platform.
What is the output of a compiler called?,An executable file.,Source code.,A list of errors.,A translated line of code.,Medium,2.5,A compiler takes source code as input and produces an executable file (machine code) as output. This file can be run independently.
What is the input to an interpreter?,Source code.,Machine code.,An executable file.,A list of errors.,Medium,2.5,An interpreter takes source code as input. It does not produce a separate executable file; it translates and runs the source code directly.
Which IDE feature helps prevent syntax errors?,Syntax highlighting,Run-time environment,Version control,Debugger,Medium,2.5,Syntax highlighting color-codes different elements of the language helping the programmer spot typos and incorrect keywords as they type.
What is the purpose of a translator for a low-level assembly language?,It is an assembler that converts mnemonics into machine code.,It is an interpreter that runs the assembly code.,It is a compiler that makes the code portable.,It is a debugger that finds errors.,Medium,2.5,An assembler is a specific type of translator that converts assembly language (mnemonics like ADD STORE) into machine code.
How does an IDE's run-time environment help a programmer?,It allows them to test and run their code without leaving the IDE.,It automatically saves their code every second.,It connects them to other programmers online.,It designs the user interface for them.,Medium,2.5,The run-time environment is crucial for iterative testing allowing quick code execution and feedback within the development tool itself.
What is a benefit of using a compiler for distributing software?,The source code is hidden and protected.,The program will have no errors.,The program will run on any machine without a translator.,The program is easier to debug for the end user.,Medium,2.5,Compiling code into an executable means users can run the program without seeing or needing the original source code which protects the programmers intellectual property.
When would using an interpreter be more suitable than a compiler?,During program development for easier debugging.,When distributing the final version of software.,When the program must run as fast as possible.,When the source code needs to be hidden.,Medium,2.5,Interpreters are ideal for development because they provide immediate feedback on errors. Compilers are better for final distribution due to speed and code protection.
What is a characteristic of both compilers and interpreters?,They both translate high-level code.,They both produce an executable file.,They both execute code line-by-line.,They both are types of low-level languages.,Medium,2.5,Both compilers and interpreters are types of translators that convert high-level code into machine code. They differ in how and when they do this.
What does an IDE's error diagnostic tool typically provide?,A list of line numbers and descriptions of syntax errors.,An automatic fix for all errors.,A new version of the programming language.,A report on the programs speed.,Medium,2.5,Error diagnostics identify mistakes often highlighting the line number and giving a description of the problem such as a missing bracket or undeclared variable.
What is the main reason an IDE is used instead of a simple text editor?,It provides integrated tools that simplify the entire development process.,It is always free to use.,It makes the code run faster.,It automatically writes bug-free code.,Medium,2.5,An IDE provides a centralized workspace with an editor debugger translator and other tools which significantly improves a programmers efficiency compared to separate tools.
What is the final stage of using a compiler before a program can be run?,Linking object code with libraries to create an executable.,Writing the source code.,Debugging the logic errors.,Interpreting the code.,Medium,2.5,Compilation often involves multiple stages. After translating source code into object code a linker combines it with necessary library files to create a final executable program.
What is the purpose of version control tools in an IDE?,To manage different versions of the source code and track changes.,To control the version of the operating system.,To translate between different versions of a language.,To check for viruses in the code.,Hard,2.5,Version control systems like Git integrated into IDEs allow teams to collaborate track history and revert to previous versions of the codebase easily.
A program is compiled for a specific CPU architecture. Why wont it run on a different CPU?,Because machine code is hardware-specific.,Because the source code is missing.,Because it needs an interpreter.,Because it was written in a high-level language.,Hard,2.5,Compiled machine code is specific to the instruction set of the CPU it was compiled for. A different CPU architecture will not understand these instructions.
What is the key difference between source code and machine code?,Source code is human-readable; machine code is computer-readable.,Machine code is written in Python; source code is in binary.,Source code is faster to execute than machine code.,Machine code is easier for humans to debug.,Hard,2.5,Source code is written by programmers in a high-level language. Machine code is the binary output of a translator which the CPU executes directly.
Why is a program often slower when run using an interpreter?,Because the translation happens at the same time as execution.,Because interpreters are badly designed.,Because it is compiled first.,Because it uses a different algorithm.,Hard,2.5,The overhead of translating the code line-by-line while the program is running adds extra processing time making interpreted programs generally slower than compiled ones.
What is a potential security advantage of using a compiled language?,The source code is not distributed to users.,Programs are immune to viruses.,It is impossible to reverse engineer.,It runs on any system without setup.,Hard,2.5,Since users only receive the executable machine code the original source code remains private making it harder for others to find vulnerabilities or copy the logic.
What is a disassembler?,A tool that converts machine code back into assembly language.,A type of interpreter.,A tool that fixes errors in code.,An IDE component for editing.,Hard,2.5,A disassembler reverses the assembly process attempting to convert machine code back into a more human-readable form like assembly language. It does not recover the original source code.
What is the purpose of a profiler in an IDE?,To analyse the programs performance and identify slow sections.,To check the spelling in comments.,To create a professional document.,To design the program's user interface.,Hard,2.5,A profiler is an advanced tool that measures the programs execution time memory usage and frequency of function calls helping programmers optimize performance.
What is the difference between a syntax error and a logic error in the context of translators?,A syntax error is caught by the translator; a logic error is not.,A logic error is caught by the translator; a syntax error is not.,Both are caught during translation.,Neither are caught during translation.,Hard,2.5,Translators (compilers interpreters) can detect and report syntax errors which break the language rules. Logic errors mistakes in the program's algorithm are only found during testing.
What is meant by the term abstraction in high-level languages?,Unnecessary details about the hardware are hidden from the programmer.,The code is made more complex.,The programmer must manage memory manually.,The code runs faster.,Hard,2.5,Abstraction is a key concept. High-level languages hide complex low-level details like memory addresses allowing programmers to focus on solving problems.
Why might an IDE include a simulator or emulator?,To test code for hardware that is not physically available.,To make the code more portable.,To translate code into a different language.,To improve the code's syntax.,Hard,2.5,Simulators and emulators are crucial for developing software for embedded systems or mobile devices allowing testing on a PC without the actual hardware.
What is linking in the compilation process?,Combining compiled object code with library files to create an executable.,Connecting to the internet to download code.,Debugging the source code.,Writing the initial program.,Hard,2.5,Linking is the final stage where the linker combines the programmers compiled object code with pre-compiled code from libraries to resolve all references and create a single executable file.
What is object code?,Machine code output by a compiler before linking.,Source code that has been edited.,Code that is ready to be interpreted.,Another name for high-level code.,Hard,2.5,Object code is the intermediate machine code produced by a compiler from source code. It is not yet executable until it is linked with other object files and libraries.
What is a key reason for using an interpreter in scripting languages?,For quick execution and easy editing without a compilation step.,To hide the source code from users.,To make the scripts run faster than compiled programs.,To create standalone applications.,Hard,2.5,Scripting languages like JavaScript or Python are often interpreted to allow for rapid development and execution without the delay of a compilation step.
How does a Just-In-Time JIT compiler work?,It compiles code during program execution for improved performance.,It compiles code only once at the start of development.,It is another name for a standard interpreter.,It compiles code for future use.,Hard,2.5,A JIT compiler is a feature of some modern interpreters like the Java Virtual Machine. It compiles frequently used parts of the code to machine code during runtime to speed up execution.
What is the role of libraries in the compilation process?,They provide pre-written code for common tasks that can be linked in.,They store books about programming.,They are where source code is written.,They are used to interpret code.,Hard,2.5,Libraries contain pre-compiled code for common functions (eg mathematical operations). The linker includes this code with the programmers object code to create the final program avoiding rewriting common code.